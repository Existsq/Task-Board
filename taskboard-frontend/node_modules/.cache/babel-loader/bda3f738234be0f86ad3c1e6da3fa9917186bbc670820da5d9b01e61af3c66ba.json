{"ast":null,"code":"var _jsxFileName = \"/Users/exist/Desktop/work/taskboard-frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.tsx\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { loginApi, registerApi, getMeApi, setAuthToken, removeAuthToken } from \"../api/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    const token = localStorage.getItem(\"jwt\");\n    if (token) {\n      setAuthToken(token);\n    }\n    async function fetchUser() {\n      if (!token) {\n        setIsLoading(false);\n        return;\n      }\n      try {\n        const user = await getMeApi();\n        setUser(user);\n        setIsAuthenticated(true);\n      } catch {\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchUser();\n  }, []);\n  async function login(email, password) {\n    const token = await loginApi(email, password);\n    localStorage.setItem(\"jwt\", token);\n    setAuthToken(token);\n    const user = await getMeApi();\n    setUser(user);\n    setIsAuthenticated(true);\n  }\n  async function register(email, password) {\n    const token = await registerApi(email, password);\n    localStorage.setItem(\"jwt\", token);\n    setAuthToken(token);\n    const user = await getMeApi();\n    setUser(user);\n    setIsAuthenticated(true);\n  }\n  function logout() {\n    localStorage.removeItem(\"jwt\");\n    removeAuthToken();\n    setUser(null);\n    setIsAuthenticated(false);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"BKa16Kz0rM4B0y8AT6EXjU1HOY4=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","loginApi","registerApi","getMeApi","setAuthToken","removeAuthToken","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","fetchUser","login","email","password","setItem","register","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/exist/Desktop/work/taskboard-frontend/src/context/AuthContext.tsx"],"sourcesContent":["// src/context/AuthContext.tsx\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from \"react\";\nimport {\n  loginApi,\n  registerApi,\n  getMeApi,\n  setAuthToken,\n  removeAuthToken,\n} from \"../api/auth\";\n\ninterface User {\n  id: string;\n  email: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"jwt\");\n    if (token) {\n      setAuthToken(token);\n    }\n\n    async function fetchUser() {\n      if (!token) {\n        setIsLoading(false);\n        return;\n      }\n\n      try {\n        const user = await getMeApi();\n        setUser(user);\n        setIsAuthenticated(true);\n      } catch {\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchUser();\n  }, []);\n\n  async function login(email: string, password: string) {\n    const token = await loginApi(email, password);\n    localStorage.setItem(\"jwt\", token);\n    setAuthToken(token);\n\n    const user = await getMeApi();\n    setUser(user);\n    setIsAuthenticated(true);\n  }\n\n  async function register(email: string, password: string) {\n    const token = await registerApi(email, password);\n    localStorage.setItem(\"jwt\", token);\n    setAuthToken(token);\n\n    const user = await getMeApi();\n    setUser(user);\n    setIsAuthenticated(true);\n  }\n\n  function logout() {\n    localStorage.removeItem(\"jwt\");\n    removeAuthToken();\n    setUser(null);\n    setIsAuthenticated(false);\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ user, isAuthenticated, isLoading, login, register, logout }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}