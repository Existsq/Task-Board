{"ast":null,"code":"var _jsxFileName = \"/Users/exist/Desktop/work/taskboard-frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nfunction getCookie(name) {\n  const match = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]+)\"));\n  return match ? decodeURIComponent(match[2]) : null;\n}\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Всегда отправляем куки\n  axios.defaults.withCredentials = true;\n  useEffect(() => {\n    const interceptor = axios.interceptors.request.use(config => {\n      if (config.method === \"post\" || config.method === \"put\" || config.method === \"delete\") {\n        const csrfToken = getCookie(\"XSRF-TOKEN\");\n        if (csrfToken && config.headers) {\n          config.headers[\"X-XSRF-TOKEN\"] = csrfToken;\n        }\n      }\n      return config;\n    });\n    return () => {\n      axios.interceptors.request.eject(interceptor);\n    };\n  }, []);\n  async function fetchCsrfToken() {\n    await axios.get(\"http://localhost:9090/api/v1/auth/csrf-token\");\n  }\n  const login = async (email, password) => {\n    await fetchCsrfToken();\n    await axios.post(\"http://localhost:9090/api/v1/auth/login\", {\n      email,\n      password\n    });\n    setIsAuthenticated(true); // Устанавливаем true после успешного запроса\n  };\n  const register = async (email, password) => {\n    await fetchCsrfToken();\n    await axios.post(\"http://localhost:9090/api/v1/auth/register\", {\n      email,\n      password\n    });\n    setIsAuthenticated(true);\n  };\n  const logout = async () => {\n    await fetchCsrfToken();\n    await axios.post(\"http://localhost:9090/api/v1/auth/logout\");\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      login,\n      register,\n      logout,\n      isAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"JkS3Meyzlj18m4l86SBr9YDqEkQ=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","undefined","getCookie","name","match","document","cookie","RegExp","decodeURIComponent","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","defaults","withCredentials","interceptor","interceptors","request","use","config","method","csrfToken","headers","eject","fetchCsrfToken","get","login","email","password","post","register","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/exist/Desktop/work/taskboard-frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from \"react\";\nimport axios from \"axios\";\n\ninterface AuthContextType {\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nfunction getCookie(name: string): string | null {\n  const match = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]+)\"));\n  return match ? decodeURIComponent(match[2]) : null;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n\n  // Всегда отправляем куки\n  axios.defaults.withCredentials = true;\n\n  useEffect(() => {\n    const interceptor = axios.interceptors.request.use((config) => {\n      if (\n        config.method === \"post\" ||\n        config.method === \"put\" ||\n        config.method === \"delete\"\n      ) {\n        const csrfToken = getCookie(\"XSRF-TOKEN\");\n        if (csrfToken && config.headers) {\n          config.headers[\"X-XSRF-TOKEN\"] = csrfToken;\n        }\n      }\n      return config;\n    });\n\n    return () => {\n      axios.interceptors.request.eject(interceptor);\n    };\n  }, []);\n\n  async function fetchCsrfToken() {\n    await axios.get(\"http://localhost:9090/api/v1/auth/csrf-token\");\n  }\n\n  const login = async (email: string, password: string) => {\n    await fetchCsrfToken();\n    await axios.post(\"http://localhost:9090/api/v1/auth/login\", {\n      email,\n      password,\n    });\n    setIsAuthenticated(true); // Устанавливаем true после успешного запроса\n  };\n\n  const register = async (email: string, password: string) => {\n    await fetchCsrfToken();\n    await axios.post(\"http://localhost:9090/api/v1/auth/register\", {\n      email,\n      password,\n    });\n    setIsAuthenticated(true);\n  };\n\n  const logout = async () => {\n    await fetchCsrfToken();\n    await axios.post(\"http://localhost:9090/api/v1/auth/logout\");\n    setIsAuthenticated(false);\n  };\n\n  return (\n    <AuthContext.Provider value={{ login, register, logout, isAuthenticated }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}