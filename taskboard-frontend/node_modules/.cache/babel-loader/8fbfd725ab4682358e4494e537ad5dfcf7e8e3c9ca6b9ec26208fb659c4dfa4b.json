{"ast":null,"code":"var _jsxFileName = \"/Users/exist/Desktop/work/taskboard-frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nfunction getCookie(name) {\n  const match = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]+)\"));\n  return match ? decodeURIComponent(match[2]) : null;\n}\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  axios.defaults.withCredentials = true;\n\n  // Добавляем CSRF токен в заголовок для \"опасных\" запросов\n  useEffect(() => {\n    const interceptor = axios.interceptors.request.use(config => {\n      if (config.method === \"post\" || config.method === \"put\" || config.method === \"delete\") {\n        const csrfToken = getCookie(\"XSRF-TOKEN\");\n        if (csrfToken && config.headers) {\n          config.headers[\"X-XSRF-TOKEN\"] = csrfToken;\n        }\n      }\n      return config;\n    });\n    return () => {\n      axios.interceptors.request.eject(interceptor);\n    };\n  }, []);\n\n  // При загрузке проверяем авторизацию\n  useEffect(() => {\n    async function fetchUser() {\n      try {\n        const res = await axios.get(\"/api/v1/auth/me\"); // должен возвращать данные пользователя\n        setUser(res.data);\n        setIsAuthenticated(true);\n      } catch {\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchUser();\n  }, []);\n\n  // Получаем CSRF токен (если нужно) перед мутациями\n  async function fetchCsrfToken() {\n    await axios.get(\"/api/v1/auth/csrf-token\");\n  }\n  async function login(email, password) {\n    await fetchCsrfToken();\n    await axios.post(\"/api/v1/auth/login\", {\n      email,\n      password\n    });\n    // после успешного логина обновляем состояние пользователя\n    const res = await axios.get(\"/api/v1/auth/me\");\n    setUser(res.data);\n    setIsAuthenticated(true);\n  }\n  async function register(email, password) {\n    await fetchCsrfToken();\n    await axios.post(\"/api/v1/auth/register\", {\n      email,\n      password\n    });\n    const res = await axios.get(\"/api/v1/auth/me\");\n    setUser(res.data);\n    setIsAuthenticated(true);\n  }\n  async function logout() {\n    await fetchCsrfToken();\n    await axios.post(\"/api/v1/auth/logout\");\n    setUser(null);\n    setIsAuthenticated(false);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"4WlC45S1XrGHM5rqMYuCj0l6ipw=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","undefined","getCookie","name","match","document","cookie","RegExp","decodeURIComponent","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","isAuthenticated","setIsAuthenticated","defaults","withCredentials","interceptor","interceptors","request","use","config","method","csrfToken","headers","eject","fetchUser","res","get","data","fetchCsrfToken","login","email","password","post","register","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/exist/Desktop/work/taskboard-frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from \"react\";\nimport axios from \"axios\";\n\ninterface User {\n  id: string;\n  email: string;\n  // другие поля пользователя, если нужны\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nfunction getCookie(name: string): string | null {\n  const match = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]+)\"));\n  return match ? decodeURIComponent(match[2]) : null;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  axios.defaults.withCredentials = true;\n\n  // Добавляем CSRF токен в заголовок для \"опасных\" запросов\n  useEffect(() => {\n    const interceptor = axios.interceptors.request.use((config) => {\n      if (\n        config.method === \"post\" ||\n        config.method === \"put\" ||\n        config.method === \"delete\"\n      ) {\n        const csrfToken = getCookie(\"XSRF-TOKEN\");\n        if (csrfToken && config.headers) {\n          config.headers[\"X-XSRF-TOKEN\"] = csrfToken;\n        }\n      }\n      return config;\n    });\n\n    return () => {\n      axios.interceptors.request.eject(interceptor);\n    };\n  }, []);\n\n  // При загрузке проверяем авторизацию\n  useEffect(() => {\n    async function fetchUser() {\n      try {\n        const res = await axios.get(\"/api/v1/auth/me\"); // должен возвращать данные пользователя\n        setUser(res.data);\n        setIsAuthenticated(true);\n      } catch {\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchUser();\n  }, []);\n\n  // Получаем CSRF токен (если нужно) перед мутациями\n  async function fetchCsrfToken() {\n    await axios.get(\"/api/v1/auth/csrf-token\");\n  }\n\n  async function login(email: string, password: string) {\n    await fetchCsrfToken();\n    await axios.post(\"/api/v1/auth/login\", { email, password });\n    // после успешного логина обновляем состояние пользователя\n    const res = await axios.get(\"/api/v1/auth/me\");\n    setUser(res.data);\n    setIsAuthenticated(true);\n  }\n\n  async function register(email: string, password: string) {\n    await fetchCsrfToken();\n    await axios.post(\"/api/v1/auth/register\", { email, password });\n    const res = await axios.get(\"/api/v1/auth/me\");\n    setUser(res.data);\n    setIsAuthenticated(true);\n  }\n\n  async function logout() {\n    await fetchCsrfToken();\n    await axios.post(\"/api/v1/auth/logout\");\n    setUser(null);\n    setIsAuthenticated(false);\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ user, isAuthenticated, isLoading, login, register, logout }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}