{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { getTasks, deleteTask as apiDeleteTask, updateTask as apiUpdateTask } from \"../api/task\";\nexport function useTasks() {\n  _s();\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const refresh = useCallback(async filters => {\n    setLoading(true);\n    setError(null);\n    try {\n      const params = {};\n      if (filters !== null && filters !== void 0 && filters.status) params.status = filters.status;\n      if (filters !== null && filters !== void 0 && filters.sort) params.sort = filters.sort;\n      if (filters !== null && filters !== void 0 && filters.direction) params.order = filters.direction;\n      const data = await getTasks(params);\n      const mappedRows = data.map(task => ({\n        id: String(task.id),\n        title: task.title,\n        description: task.description,\n        status: task.status.charAt(0).toUpperCase() + task.status.slice(1).toLowerCase(),\n        dueDate: task.dueDate,\n        date: task.createdAt || task.dueDate,\n        until: task.dueDate\n      }));\n      setRows(mappedRows);\n    } catch (err) {\n      setError(err);\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const deleteTask = async id => {\n    await apiDeleteTask(Number(id));\n    await refresh();\n  };\n  const updateTask = async task => {\n    await apiUpdateTask({\n      ...task,\n      id: Number(task.id)\n    });\n    await refresh();\n  };\n  return {\n    rows,\n    loading,\n    error,\n    refresh,\n    deleteTask,\n    updateTask\n  };\n}\n_s(useTasks, \"K0r1OJIxY2Ck8SFAiZsC2xdlFtg=\");","map":{"version":3,"names":["useCallback","useState","getTasks","deleteTask","apiDeleteTask","updateTask","apiUpdateTask","useTasks","_s","rows","setRows","loading","setLoading","error","setError","refresh","filters","params","status","sort","direction","order","data","mappedRows","map","task","id","String","title","description","charAt","toUpperCase","slice","toLowerCase","dueDate","date","createdAt","until","err","console","Number"],"sources":["/Users/exist/Desktop/work/taskboard-frontend/src/hooks/useTasks.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport {\n  getTasks,\n  deleteTask as apiDeleteTask,\n  updateTask as apiUpdateTask,\n  TaskResponse,\n} from \"../api/task\";\nimport { Filters } from \"../components/dashboard/tasks/TaskFilters\";\n\ntype RowType = {\n  dueDate: string;\n  description: string;\n  id: string;\n  title: string;\n  date: string;\n  status: string;\n  until: string;\n};\n\nexport function useTasks() {\n  const [rows, setRows] = useState<RowType[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const refresh = useCallback(async (filters?: Filters) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const params: Record<string, string> = {};\n\n      if (filters?.status) params.status = filters.status;\n      if (filters?.sort) params.sort = filters.sort;\n      if (filters?.direction) params.order = filters.direction;\n\n      const data = await getTasks(params);\n\n      const mappedRows: RowType[] = data.map((task: TaskResponse) => ({\n        id: String(task.id),\n        title: task.title,\n        description: task.description,\n        status: task.status.charAt(0).toUpperCase() + task.status.slice(1).toLowerCase(),\n        dueDate: task.dueDate,\n        date: task.createdAt || task.dueDate,\n        until: task.dueDate,\n      }));\n\n      setRows(mappedRows);\n    } catch (err) {\n      setError(err as Error);\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const deleteTask = async (id: string) => {\n    await apiDeleteTask(Number(id));\n    await refresh();\n  };\n\n  const updateTask = async (task: {\n    id: string;\n    title: string;\n    description: string;\n    dueDate: string;\n    status: string;\n  }) => {\n    await apiUpdateTask({\n      ...task,\n      id: Number(task.id),\n    });\n    await refresh();\n  };\n\n  return { rows, loading, error, refresh, deleteTask, updateTask };\n}"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC7C,SACEC,QAAQ,EACRC,UAAU,IAAIC,aAAa,EAC3BC,UAAU,IAAIC,aAAa,QAEtB,aAAa;AAapB,OAAO,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAY,EAAE,CAAC;EAC/C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAe,IAAI,CAAC;EAEtD,MAAMc,OAAO,GAAGf,WAAW,CAAC,MAAOgB,OAAiB,IAAK;IACvDJ,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMG,MAA8B,GAAG,CAAC,CAAC;MAEzC,IAAID,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEE,MAAM,EAAED,MAAM,CAACC,MAAM,GAAGF,OAAO,CAACE,MAAM;MACnD,IAAIF,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEG,IAAI,EAAEF,MAAM,CAACE,IAAI,GAAGH,OAAO,CAACG,IAAI;MAC7C,IAAIH,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEI,SAAS,EAAEH,MAAM,CAACI,KAAK,GAAGL,OAAO,CAACI,SAAS;MAExD,MAAME,IAAI,GAAG,MAAMpB,QAAQ,CAACe,MAAM,CAAC;MAEnC,MAAMM,UAAqB,GAAGD,IAAI,CAACE,GAAG,CAAEC,IAAkB,KAAM;QAC9DC,EAAE,EAAEC,MAAM,CAACF,IAAI,CAACC,EAAE,CAAC;QACnBE,KAAK,EAAEH,IAAI,CAACG,KAAK;QACjBC,WAAW,EAAEJ,IAAI,CAACI,WAAW;QAC7BX,MAAM,EAAEO,IAAI,CAACP,MAAM,CAACY,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGN,IAAI,CAACP,MAAM,CAACc,KAAK,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QAChFC,OAAO,EAAET,IAAI,CAACS,OAAO;QACrBC,IAAI,EAAEV,IAAI,CAACW,SAAS,IAAIX,IAAI,CAACS,OAAO;QACpCG,KAAK,EAAEZ,IAAI,CAACS;MACd,CAAC,CAAC,CAAC;MAEHxB,OAAO,CAACa,UAAU,CAAC;IACrB,CAAC,CAAC,OAAOe,GAAG,EAAE;MACZxB,QAAQ,CAACwB,GAAY,CAAC;MACtBC,OAAO,CAAC1B,KAAK,CAACyB,GAAG,CAAC;IACpB,CAAC,SAAS;MACR1B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMT,UAAU,GAAG,MAAOuB,EAAU,IAAK;IACvC,MAAMtB,aAAa,CAACoC,MAAM,CAACd,EAAE,CAAC,CAAC;IAC/B,MAAMX,OAAO,CAAC,CAAC;EACjB,CAAC;EAED,MAAMV,UAAU,GAAG,MAAOoB,IAMzB,IAAK;IACJ,MAAMnB,aAAa,CAAC;MAClB,GAAGmB,IAAI;MACPC,EAAE,EAAEc,MAAM,CAACf,IAAI,CAACC,EAAE;IACpB,CAAC,CAAC;IACF,MAAMX,OAAO,CAAC,CAAC;EACjB,CAAC;EAED,OAAO;IAAEN,IAAI;IAAEE,OAAO;IAAEE,KAAK;IAAEE,OAAO;IAAEZ,UAAU;IAAEE;EAAW,CAAC;AAClE;AAACG,EAAA,CAzDeD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}