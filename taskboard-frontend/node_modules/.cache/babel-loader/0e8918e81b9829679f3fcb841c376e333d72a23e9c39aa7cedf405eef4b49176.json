{"ast":null,"code":"import _objectSpread from\"/Users/exist/Desktop/work/taskboard-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useCallback,useState}from\"react\";import{getTasks,deleteTask as apiDeleteTask,updateTask as apiUpdateTask}from\"../api/task\";export function useTasks(){const[rows,setRows]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const refresh=useCallback(async filters=>{setLoading(true);setError(null);try{const params={};if(filters!==null&&filters!==void 0&&filters.status)params.status=filters.status;if(filters!==null&&filters!==void 0&&filters.sort)params.sort=filters.sort;if(filters!==null&&filters!==void 0&&filters.direction)params.order=filters.direction;const data=await getTasks(params);const mappedRows=data.map(task=>({id:String(task.id),title:task.title,description:task.description,status:task.status.charAt(0).toUpperCase()+task.status.slice(1).toLowerCase(),dueDate:task.dueDate,date:task.createdAt||task.dueDate,until:task.dueDate}));setRows(mappedRows);}catch(err){setError(err);console.error(err);}finally{setLoading(false);}},[]);const deleteTask=async id=>{await apiDeleteTask(Number(id));await refresh();};const updateTask=async task=>{await apiUpdateTask(_objectSpread(_objectSpread({},task),{},{id:Number(task.id)}));await refresh();};return{rows,loading,error,refresh,deleteTask,updateTask};}","map":{"version":3,"names":["useCallback","useState","getTasks","deleteTask","apiDeleteTask","updateTask","apiUpdateTask","useTasks","rows","setRows","loading","setLoading","error","setError","refresh","filters","params","status","sort","direction","order","data","mappedRows","map","task","id","String","title","description","charAt","toUpperCase","slice","toLowerCase","dueDate","date","createdAt","until","err","console","Number","_objectSpread"],"sources":["/Users/exist/Desktop/work/taskboard-frontend/src/hooks/useTasks.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport {\n  getTasks,\n  deleteTask as apiDeleteTask,\n  updateTask as apiUpdateTask,\n  TaskResponse,\n} from \"../api/task\";\nimport { Filters } from \"../components/dashboard/tasks/TaskFilters\";\n\ntype RowType = {\n  dueDate: string;\n  description: string;\n  id: string;\n  title: string;\n  date: string;\n  status: string;\n  until: string;\n};\n\nexport function useTasks() {\n  const [rows, setRows] = useState<RowType[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const refresh = useCallback(async (filters?: Filters) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const params: Record<string, string> = {};\n\n      if (filters?.status) params.status = filters.status;\n      if (filters?.sort) params.sort = filters.sort;\n      if (filters?.direction) params.order = filters.direction;\n\n      const data = await getTasks(params);\n\n      const mappedRows: RowType[] = data.map((task: TaskResponse) => ({\n        id: String(task.id),\n        title: task.title,\n        description: task.description,\n        status: task.status.charAt(0).toUpperCase() + task.status.slice(1).toLowerCase(),\n        dueDate: task.dueDate,\n        date: task.createdAt || task.dueDate,\n        until: task.dueDate,\n      }));\n\n      setRows(mappedRows);\n    } catch (err) {\n      setError(err as Error);\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const deleteTask = async (id: string) => {\n    await apiDeleteTask(Number(id));\n    await refresh();\n  };\n\n  const updateTask = async (task: {\n    id: string;\n    title: string;\n    description: string;\n    dueDate: string;\n    status: string;\n  }) => {\n    await apiUpdateTask({\n      ...task,\n      id: Number(task.id),\n    });\n    await refresh();\n  };\n\n  return { rows, loading, error, refresh, deleteTask, updateTask };\n}"],"mappings":"iIAAA,OAASA,WAAW,CAAEC,QAAQ,KAAQ,OAAO,CAC7C,OACEC,QAAQ,CACRC,UAAU,GAAI,CAAAC,aAAa,CAC3BC,UAAU,GAAI,CAAAC,aAAa,KAEtB,aAAa,CAapB,MAAO,SAAS,CAAAC,QAAQA,CAAA,CAAG,CACzB,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGR,QAAQ,CAAY,EAAE,CAAC,CAC/C,KAAM,CAACS,OAAO,CAAEC,UAAU,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACW,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAe,IAAI,CAAC,CAEtD,KAAM,CAAAa,OAAO,CAAGd,WAAW,CAAC,KAAO,CAAAe,OAAiB,EAAK,CACvDJ,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,IAAI,CAAC,CAEd,GAAI,CACF,KAAM,CAAAG,MAA8B,CAAG,CAAC,CAAC,CAEzC,GAAID,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEE,MAAM,CAAED,MAAM,CAACC,MAAM,CAAGF,OAAO,CAACE,MAAM,CACnD,GAAIF,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEG,IAAI,CAAEF,MAAM,CAACE,IAAI,CAAGH,OAAO,CAACG,IAAI,CAC7C,GAAIH,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEI,SAAS,CAAEH,MAAM,CAACI,KAAK,CAAGL,OAAO,CAACI,SAAS,CAExD,KAAM,CAAAE,IAAI,CAAG,KAAM,CAAAnB,QAAQ,CAACc,MAAM,CAAC,CAEnC,KAAM,CAAAM,UAAqB,CAAGD,IAAI,CAACE,GAAG,CAAEC,IAAkB,GAAM,CAC9DC,EAAE,CAAEC,MAAM,CAACF,IAAI,CAACC,EAAE,CAAC,CACnBE,KAAK,CAAEH,IAAI,CAACG,KAAK,CACjBC,WAAW,CAAEJ,IAAI,CAACI,WAAW,CAC7BX,MAAM,CAAEO,IAAI,CAACP,MAAM,CAACY,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAGN,IAAI,CAACP,MAAM,CAACc,KAAK,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAChFC,OAAO,CAAET,IAAI,CAACS,OAAO,CACrBC,IAAI,CAAEV,IAAI,CAACW,SAAS,EAAIX,IAAI,CAACS,OAAO,CACpCG,KAAK,CAAEZ,IAAI,CAACS,OACd,CAAC,CAAC,CAAC,CAEHxB,OAAO,CAACa,UAAU,CAAC,CACrB,CAAE,MAAOe,GAAG,CAAE,CACZxB,QAAQ,CAACwB,GAAY,CAAC,CACtBC,OAAO,CAAC1B,KAAK,CAACyB,GAAG,CAAC,CACpB,CAAC,OAAS,CACR1B,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAR,UAAU,CAAG,KAAO,CAAAsB,EAAU,EAAK,CACvC,KAAM,CAAArB,aAAa,CAACmC,MAAM,CAACd,EAAE,CAAC,CAAC,CAC/B,KAAM,CAAAX,OAAO,CAAC,CAAC,CACjB,CAAC,CAED,KAAM,CAAAT,UAAU,CAAG,KAAO,CAAAmB,IAMzB,EAAK,CACJ,KAAM,CAAAlB,aAAa,CAAAkC,aAAA,CAAAA,aAAA,IACdhB,IAAI,MACPC,EAAE,CAAEc,MAAM,CAACf,IAAI,CAACC,EAAE,CAAC,EACpB,CAAC,CACF,KAAM,CAAAX,OAAO,CAAC,CAAC,CACjB,CAAC,CAED,MAAO,CAAEN,IAAI,CAAEE,OAAO,CAAEE,KAAK,CAAEE,OAAO,CAAEX,UAAU,CAAEE,UAAW,CAAC,CAClE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}