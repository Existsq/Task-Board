{"ast":null,"code":"var _jsxFileName = \"/Users/exist/Desktop/work/taskboard-frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n// Утилита для чтения куки (чтобы получить CSRF токен)\nfunction getCookie(name) {\n  const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));\n  return match ? decodeURIComponent(match[2]) : null;\n}\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n\n  // Включаем отправку куки во всех запросах\n  axios.defaults.withCredentials = true;\n\n  // Добавляем интерцептор, чтобы подставлять CSRF токен в заголовок\n  useEffect(() => {\n    const interceptor = axios.interceptors.request.use(config => {\n      if (config.method === \"post\" || config.method === \"put\" || config.method === \"delete\") {\n        const csrfToken = getCookie(\"XSRF-TOKEN\");\n        if (csrfToken && config.headers) {\n          config.headers[\"X-XSRF-TOKEN\"] = csrfToken;\n        }\n      }\n      return config;\n    });\n    return () => {\n      axios.interceptors.request.eject(interceptor);\n    };\n  }, []);\n\n  // Запрашиваем CSRF токен перед любым защищённым запросом, если нужно\n  async function fetchCsrfToken() {\n    // Вызываем GET /csrf-token, чтобы сервер установил куку XSRF-TOKEN\n    await axios.get(\"http://localhost:9090/api/v1/auth/csrf-token\");\n  }\n\n  // Проверка авторизации (сервер смотрит JWT в HttpOnly куках)\n  const checkAuth = useCallback(async () => {\n    try {\n      await axios.get(\"http://localhost:9090/api/v1/auth/me\");\n      setIsAuthenticated(true);\n    } catch {\n      setIsAuthenticated(false);\n    }\n  }, []);\n  useEffect(() => {\n    checkAuth();\n  }, [checkAuth]);\n  const login = async (email, password) => {\n    await fetchCsrfToken();\n    await axios.post(\"http://localhost:9090/api/v1/auth/login\", {\n      email,\n      password\n    });\n    await checkAuth();\n  };\n  const register = async (email, password) => {\n    await fetchCsrfToken();\n    await axios.post(\"http://localhost:9090/api/v1/auth/register\", {\n      email,\n      password\n    });\n    await checkAuth();\n  };\n  const logout = async () => {\n    await fetchCsrfToken();\n    await axios.post(\"http://localhost:9090/api/v1/auth/logout\");\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      login,\n      register,\n      logout,\n      isAuthenticated,\n      checkAuth\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"VwWONfl5GtHfTHP51wVCJvNRpsM=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","AuthContext","undefined","getCookie","name","match","document","cookie","RegExp","decodeURIComponent","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","defaults","withCredentials","interceptor","interceptors","request","use","config","method","csrfToken","headers","eject","fetchCsrfToken","get","checkAuth","login","email","password","post","register","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/exist/Desktop/work/taskboard-frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n  useCallback,\n} from \"react\";\nimport axios from \"axios\";\n\ninterface AuthContextType {\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  isAuthenticated: boolean | null;\n  checkAuth: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\n// Утилита для чтения куки (чтобы получить CSRF токен)\nfunction getCookie(name: string): string | null {\n  const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));\n  return match ? decodeURIComponent(match[2]) : null;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);\n\n  // Включаем отправку куки во всех запросах\n  axios.defaults.withCredentials = true;\n\n  // Добавляем интерцептор, чтобы подставлять CSRF токен в заголовок\n  useEffect(() => {\n    const interceptor = axios.interceptors.request.use((config) => {\n      if (\n        config.method === \"post\" ||\n        config.method === \"put\" ||\n        config.method === \"delete\"\n      ) {\n        const csrfToken = getCookie(\"XSRF-TOKEN\");\n        if (csrfToken && config.headers) {\n          config.headers[\"X-XSRF-TOKEN\"] = csrfToken;\n        }\n      }\n      return config;\n    });\n\n    return () => {\n      axios.interceptors.request.eject(interceptor);\n    };\n  }, []);\n\n  // Запрашиваем CSRF токен перед любым защищённым запросом, если нужно\n  async function fetchCsrfToken() {\n    // Вызываем GET /csrf-token, чтобы сервер установил куку XSRF-TOKEN\n    await axios.get(\"http://localhost:9090/api/v1/auth/csrf-token\");\n  }\n\n  // Проверка авторизации (сервер смотрит JWT в HttpOnly куках)\n  const checkAuth = useCallback(async () => {\n    try {\n      await axios.get(\"http://localhost:9090/api/v1/auth/me\");\n      setIsAuthenticated(true);\n    } catch {\n      setIsAuthenticated(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    checkAuth();\n  }, [checkAuth]);\n\n  const login = async (email: string, password: string) => {\n    await fetchCsrfToken();\n    await axios.post(\"http://localhost:9090/api/v1/auth/login\", { email, password });\n    await checkAuth();\n  };\n\n  const register = async (email: string, password: string) => {\n    await fetchCsrfToken();\n    await axios.post(\"http://localhost:9090/api/v1/auth/register\", { email, password });\n    await checkAuth();\n  };\n\n  const logout = async () => {\n    await fetchCsrfToken();\n    await axios.post(\"http://localhost:9090/api/v1/auth/logout\");\n    setIsAuthenticated(false);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{ login, register, logout, isAuthenticated, checkAuth }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}