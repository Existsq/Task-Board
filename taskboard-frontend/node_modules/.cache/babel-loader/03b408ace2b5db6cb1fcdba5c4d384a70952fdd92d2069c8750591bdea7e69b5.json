{"ast":null,"code":"var _jsxFileName = \"/Users/exist/Desktop/work/taskboard-frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\naxios.defaults.withCredentials = true;\n\n// Перед каждым запросом добавляем CSRF токен из куки в заголовок\naxios.interceptors.request.use(config => {\n  const csrfToken = getCookie(\"XSRF-TOKEN\");\n  if (csrfToken && config.headers) {\n    config.headers[\"X-XSRF-TOKEN\"] = csrfToken;\n  }\n  return config;\n});\n\n// Вспомогательная функция для чтения куки по имени\nfunction getCookie(name) {\n  const match = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]+)\"));\n  return match ? decodeURIComponent(match[2]) : null;\n}\nexport function AuthProvider({\n  children\n}) {\n  const login = async (email, password) => {\n    await axios.post(\"http://localhost:9090/api/v1/auth/login\", {\n      email,\n      password\n    });\n  };\n  const register = async (email, password) => {\n    await axios.post(\"http://localhost:9090/api/v1/auth/register\", {\n      email,\n      password\n    });\n  };\n  const logout = async () => {\n    await axios.post(\"http://localhost:9090/api/v1/auth/logout\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_c = AuthProvider;\nexport function useAuth() {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within AuthProvider\");\n  return context;\n}\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","axios","jsxDEV","_jsxDEV","AuthContext","undefined","defaults","withCredentials","interceptors","request","use","config","csrfToken","getCookie","headers","name","match","document","cookie","RegExp","decodeURIComponent","AuthProvider","children","login","email","password","post","register","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s","context","Error","$RefreshReg$"],"sources":["/Users/exist/Desktop/work/taskboard-frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, ReactNode } from \"react\";\nimport axios from \"axios\";\n\ninterface AuthContextType {\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\naxios.defaults.withCredentials = true;\n\n// Перед каждым запросом добавляем CSRF токен из куки в заголовок\naxios.interceptors.request.use((config) => {\n  const csrfToken = getCookie(\"XSRF-TOKEN\");\n  if (csrfToken && config.headers) {\n    config.headers[\"X-XSRF-TOKEN\"] = csrfToken;\n  }\n  return config;\n});\n\n// Вспомогательная функция для чтения куки по имени\nfunction getCookie(name: string): string | null {\n  const match = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]+)\"));\n  return match ? decodeURIComponent(match[2]) : null;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const login = async (email: string, password: string) => {\n    await axios.post(\"http://localhost:9090/api/v1/auth/login\", {\n      email,\n      password,\n    });\n  };\n\n  const register = async (email: string, password: string) => {\n    await axios.post(\"http://localhost:9090/api/v1/auth/register\", {\n      email,\n      password,\n    });\n  };\n\n  const logout = async () => {\n    await axios.post(\"http://localhost:9090/api/v1/auth/logout\");\n  };\n\n  return (\n    <AuthContext.Provider value={{ login, register, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within AuthProvider\");\n  return context;\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAmB,OAAO;AACnE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ1B,MAAMC,WAAW,gBAAGL,aAAa,CAA8BM,SAAS,CAAC;AAMzEJ,KAAK,CAACK,QAAQ,CAACC,eAAe,GAAG,IAAI;;AAErC;AACAN,KAAK,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACzC,MAAMC,SAAS,GAAGC,SAAS,CAAC,YAAY,CAAC;EACzC,IAAID,SAAS,IAAID,MAAM,CAACG,OAAO,EAAE;IAC/BH,MAAM,CAACG,OAAO,CAAC,cAAc,CAAC,GAAGF,SAAS;EAC5C;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,SAASE,SAASA,CAACE,IAAY,EAAiB;EAC9C,MAAMC,KAAK,GAAGC,QAAQ,CAACC,MAAM,CAACF,KAAK,CAAC,IAAIG,MAAM,CAAC,OAAO,GAAGJ,IAAI,GAAG,UAAU,CAAC,CAAC;EAC5E,OAAOC,KAAK,GAAGI,kBAAkB,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;AACpD;AAEA,OAAO,SAASK,YAAYA,CAAC;EAAEC;AAA4B,CAAC,EAAE;EAC5D,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;IACvD,MAAMxB,KAAK,CAACyB,IAAI,CAAC,yCAAyC,EAAE;MAC1DF,KAAK;MACLC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,QAAQ,GAAG,MAAAA,CAAOH,KAAa,EAAEC,QAAgB,KAAK;IAC1D,MAAMxB,KAAK,CAACyB,IAAI,CAAC,4CAA4C,EAAE;MAC7DF,KAAK;MACLC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMG,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,MAAM3B,KAAK,CAACyB,IAAI,CAAC,0CAA0C,CAAC;EAC9D,CAAC;EAED,oBACEvB,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEP,KAAK;MAAEI,QAAQ;MAAEC;IAAO,CAAE;IAAAN,QAAA,EACtDA;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACC,EAAA,GAxBed,YAAY;AA0B5B,OAAO,SAASe,OAAOA,CAAA,EAAoB;EAAAC,EAAA;EACzC,MAAMC,OAAO,GAAGtC,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACkC,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;EACzE,OAAOD,OAAO;AAChB;AAACD,EAAA,CAJeD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}