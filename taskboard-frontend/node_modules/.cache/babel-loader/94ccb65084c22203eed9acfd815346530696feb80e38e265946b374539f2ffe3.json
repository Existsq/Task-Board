{"ast":null,"code":"var _jsxFileName = \"/Users/exist/Desktop/work/taskboard-frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n\n  // Важное: включаем withCredentials, чтобы браузер отправлял куки (включая CSRF) вместе с запросами\n  axios.defaults.withCredentials = true;\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common[\"Authorization\"];\n    }\n  }, [token]);\n  const login = async (email, password) => {\n    // Перед логином можно запросить CSRF-токен, если нужно (но с CookieCsrfTokenRepository этого часто не требуется, токен в куки приходит автоматически)\n    const res = await axios.post(\"http://localhost:9090/api/v1/auth/login\", {\n      email,\n      password\n    }, {\n      withCredentials: true\n    } // здесь важно, чтобы куки приняли\n    );\n    const t = res.data.token;\n    setToken(t);\n    localStorage.setItem(\"token\", t);\n  };\n  const register = async (email, password) => {\n    const res = await axios.post(\"http://localhost:9090/api/v1/auth/register\", {\n      email,\n      password\n    }, {\n      withCredentials: true\n    });\n    const t = res.data.token;\n    setToken(t);\n    localStorage.setItem(\"token\", t);\n  };\n  const logout = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"Q+aL11DnTzdNSb9hdmXn0SgiUDI=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","token","setToken","localStorage","getItem","defaults","withCredentials","headers","common","login","email","password","res","post","t","data","setItem","register","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/exist/Desktop/work/taskboard-frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from \"react\";\nimport axios from \"axios\";\n\ninterface AuthContextType {\n  token: string | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [token, setToken] = useState<string | null>(\n    localStorage.getItem(\"token\")\n  );\n\n  // Важное: включаем withCredentials, чтобы браузер отправлял куки (включая CSRF) вместе с запросами\n  axios.defaults.withCredentials = true;\n\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common[\"Authorization\"];\n    }\n  }, [token]);\n\n  const login = async (email: string, password: string) => {\n    // Перед логином можно запросить CSRF-токен, если нужно (но с CookieCsrfTokenRepository этого часто не требуется, токен в куки приходит автоматически)\n    const res = await axios.post(\n      \"http://localhost:9090/api/v1/auth/login\",\n      { email, password },\n      { withCredentials: true } // здесь важно, чтобы куки приняли\n    );\n    const t = res.data.token;\n    setToken(t);\n    localStorage.setItem(\"token\", t);\n  };\n\n  const register = async (email: string, password: string) => {\n    const res = await axios.post(\n      \"http://localhost:9090/api/v1/auth/register\",\n      { email, password },\n      { withCredentials: true }\n    );\n    const t = res.data.token;\n    setToken(t);\n    localStorage.setItem(\"token\", t);\n  };\n\n  const logout = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n  };\n\n  return (\n    <AuthContext.Provider value={{ token, login, register, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IACVC,aAAa,EACbC,UAAU,EACVC,QAAQ,EACRC,SAAS,QAEJ,OAAO;AACd,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS1B,MAAMC,WAAW,gBAAGP,aAAa,CAA8BQ,SAAS,CAAC;AAMzE,OAAO,SAASC,YAAYA,CAAC;EAAEC;AAA4B,CAAC,EAAE;EAAAC,EAAA;EAC5D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAChCY,YAAY,CAACC,OAAO,CAAC,OAAO,CAC9B,CAAC;;EAED;EACAX,KAAK,CAACY,QAAQ,CAACC,eAAe,GAAG,IAAI;EAErCd,SAAS,CAAC,MAAM;IACd,IAAIS,KAAK,EAAE;MACTR,KAAK,CAACY,QAAQ,CAACE,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUP,KAAK,EAAE;IACpE,CAAC,MAAM;MACL,OAAOR,KAAK,CAACY,QAAQ,CAACE,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IACvD;EACF,CAAC,EAAE,CAACP,KAAK,CAAC,CAAC;EAEX,MAAMQ,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;IACvD;IACA,MAAMC,GAAG,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAC1B,yCAAyC,EACzC;MAAEH,KAAK;MAAEC;IAAS,CAAC,EACnB;MAAEL,eAAe,EAAE;IAAK,CAAC,CAAC;IAC5B,CAAC;IACD,MAAMQ,CAAC,GAAGF,GAAG,CAACG,IAAI,CAACd,KAAK;IACxBC,QAAQ,CAACY,CAAC,CAAC;IACXX,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEF,CAAC,CAAC;EAClC,CAAC;EAED,MAAMG,QAAQ,GAAG,MAAAA,CAAOP,KAAa,EAAEC,QAAgB,KAAK;IAC1D,MAAMC,GAAG,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAC1B,4CAA4C,EAC5C;MAAEH,KAAK;MAAEC;IAAS,CAAC,EACnB;MAAEL,eAAe,EAAE;IAAK,CAC1B,CAAC;IACD,MAAMQ,CAAC,GAAGF,GAAG,CAACG,IAAI,CAACd,KAAK;IACxBC,QAAQ,CAACY,CAAC,CAAC;IACXX,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEF,CAAC,CAAC;EAClC,CAAC;EAED,MAAMI,MAAM,GAAGA,CAAA,KAAM;IACnBhB,QAAQ,CAAC,IAAI,CAAC;IACdC,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAED,oBACExB,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,KAAK;MAAEQ,KAAK;MAAEQ,QAAQ;MAAEC;IAAO,CAAE;IAAAnB,QAAA,EAC7DA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACzB,EAAA,CAjDeF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAmD5B,OAAO,SAAS6B,OAAOA,CAAA,EAAoB;EAAAC,GAAA;EACzC,MAAMC,OAAO,GAAGvC,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACiC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB;AAACD,GAAA,CANeD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}