{"ast":null,"code":"const API_BASE = \"/api/v1/tasks\";\nfunction formatDueDate(dueDate) {\n  const date = new Date(dueDate);\n  const pad = n => n.toString().padStart(2, \"0\");\n  const month = pad(date.getMonth() + 1);\n  const day = pad(date.getDate());\n  const year = date.getFullYear();\n  const hours = pad(date.getHours());\n  const minutes = pad(date.getMinutes());\n  return `${month}/${day}/${year} ${hours}:${minutes}`;\n}\nexport async function getTasks(params) {\n  const token = localStorage.getItem(\"jwt\");\n  const query = params ? \"?\" + new URLSearchParams(params).toString() : \"\";\n  const res = await fetch(`${API_BASE}${query}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!res.ok) throw new Error(\"Ошибка при получении задач\");\n  return res.json();\n}\nexport async function deleteTask(id) {\n  const token = localStorage.getItem(\"jwt\");\n  const res = await fetch(`${API_BASE}/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!res.ok) {\n    throw new Error(\"Не удалось удалить задачу\");\n  }\n}\nexport async function createTask(task) {\n  const token = localStorage.getItem(\"jwt\");\n  const formattedTask = {\n    ...task,\n    dueDate: formatDueDate(task.dueDate)\n  };\n  const res = await fetch(API_BASE, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(formattedTask)\n  });\n  if (!res.ok) {\n    throw new Error(\"Не удалось создать задачу\");\n  }\n  return res.json();\n}\nexport async function updateTask(task) {\n  const token = localStorage.getItem(\"jwt\");\n  const formattedTask = {\n    ...task,\n    dueDate: formatDueDate(task.dueDate),\n    status: task.status.toUpperCase()\n  };\n  const res = await fetch(`${API_BASE}/${task.id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(formattedTask)\n  });\n  if (!res.ok) {\n    throw new Error(\"Не удалось обновить задачу\");\n  }\n  return res.json();\n}","map":{"version":3,"names":["API_BASE","formatDueDate","dueDate","date","Date","pad","n","toString","padStart","month","getMonth","day","getDate","year","getFullYear","hours","getHours","minutes","getMinutes","getTasks","params","token","localStorage","getItem","query","URLSearchParams","res","fetch","headers","Authorization","ok","Error","json","deleteTask","id","method","createTask","task","formattedTask","body","JSON","stringify","updateTask","status","toUpperCase"],"sources":["/Users/exist/Desktop/work/taskboard-frontend/src/api/task.ts"],"sourcesContent":["const API_BASE = \"/api/v1/tasks\";\n\nexport type TaskResponse = {\n  id: number;\n  title: string;\n  description: string;\n  createdAt: string;\n  updatedAt: string;\n  status: string;\n  dueDate: string;\n};\n\nfunction formatDueDate(dueDate: string): string {\n  const date = new Date(dueDate);\n  const pad = (n: number) => n.toString().padStart(2, \"0\");\n\n  const month = pad(date.getMonth() + 1);\n  const day = pad(date.getDate());\n  const year = date.getFullYear();\n  const hours = pad(date.getHours());\n  const minutes = pad(date.getMinutes());\n\n  return `${month}/${day}/${year} ${hours}:${minutes}`;\n}\n\nexport async function getTasks(params?: Record<string, string>) {\n  const token = localStorage.getItem(\"jwt\");\n\n  const query = params\n    ? \"?\" + new URLSearchParams(params).toString()\n    : \"\";\n\n  const res = await fetch(`${API_BASE}${query}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  if (!res.ok) throw new Error(\"Ошибка при получении задач\");\n  return res.json();\n}\n\nexport async function deleteTask(id: number): Promise<void> {\n  const token = localStorage.getItem(\"jwt\");\n  const res = await fetch(`${API_BASE}/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  if (!res.ok) {\n    throw new Error(\"Не удалось удалить задачу\");\n  }\n}\n\nexport async function createTask(task: {\n  title: string;\n  description: string;\n  dueDate: string;\n  status: string;\n}) {\n  const token = localStorage.getItem(\"jwt\");\n\n  const formattedTask = {\n    ...task,\n    dueDate: formatDueDate(task.dueDate),\n  };\n\n  const res = await fetch(API_BASE, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(formattedTask),\n  });\n\n  if (!res.ok) {\n    throw new Error(\"Не удалось создать задачу\");\n  }\n\n  return res.json();\n}\n\nexport async function updateTask(task: {\n  id: number;\n  title: string;\n  description: string;\n  dueDate: string;\n  status: string;\n}) {\n  const token = localStorage.getItem(\"jwt\");\n\n  const formattedTask = {\n    ...task,\n    dueDate: formatDueDate(task.dueDate),\n    status: task.status.toUpperCase(),\n  };\n\n  const res = await fetch(`${API_BASE}/${task.id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(formattedTask),\n  });\n\n  if (!res.ok) {\n    throw new Error(\"Не удалось обновить задачу\");\n  }\n\n  return res.json();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}