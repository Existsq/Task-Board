{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nimport { getTasks, deleteTask as apiDeleteTask } from \"../api/task\";\nexport function useTasks() {\n  _s();\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const loadTasks = useCallback(async () => {\n    setLoading(true);\n    try {\n      const data = await getTasks();\n      const mapped = data.map(task => {\n        var _task$title$0$toUpper, _task$title$;\n        return {\n          id: String(task.id),\n          title: task.title,\n          date: new Date(task.createdAt).toLocaleDateString(),\n          status: task.status[0] + task.status.substring(1).toLowerCase(),\n          customer: {\n            initial: (_task$title$0$toUpper = (_task$title$ = task.title[0]) === null || _task$title$ === void 0 ? void 0 : _task$title$.toUpperCase()) !== null && _task$title$0$toUpper !== void 0 ? _task$title$0$toUpper : \"T\",\n            name: \"Test User\",\n            email: \"test@example.com\"\n          }\n        };\n      });\n      setRows(mapped);\n      setError(null);\n    } catch (err) {\n      console.error(\"Ошибка при загрузке задач\", err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    loadTasks();\n  }, [loadTasks]);\n  const handleDelete = async id => {\n    try {\n      await apiDeleteTask(Number(id));\n      await loadTasks();\n    } catch (err) {\n      console.error(\"Ошибка при удалении задачи\", err);\n      alert(\"Не удалось удалить задачу\");\n    }\n  };\n  return {\n    rows,\n    loading,\n    error,\n    refresh: loadTasks,\n    deleteTask: handleDelete\n  };\n}\n_s(useTasks, \"cXN4Xp7OEhKAX5tR0NyNN0pe5RA=\");","map":{"version":3,"names":["useCallback","useEffect","useState","getTasks","deleteTask","apiDeleteTask","useTasks","_s","rows","setRows","loading","setLoading","error","setError","loadTasks","data","mapped","map","task","_task$title$0$toUpper","_task$title$","id","String","title","date","Date","createdAt","toLocaleDateString","status","substring","toLowerCase","customer","initial","toUpperCase","name","email","err","console","handleDelete","Number","alert","refresh"],"sources":["/Users/exist/Desktop/work/taskboard-frontend/src/hooks/useTasks.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { getTasks, deleteTask as apiDeleteTask, TaskResponse } from \"../api/task\";\n\ntype RowType = {\n  id: string;\n  title: string;\n  date: string;\n  status: string;\n  customer: {\n    initial: string;\n    name: string;\n    email: string;\n  };\n};\n\nexport function useTasks() {\n  const [rows, setRows] = useState<RowType[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  const loadTasks = useCallback(async () => {\n    setLoading(true);\n    try {\n      const data: TaskResponse[] = await getTasks();\n      const mapped: RowType[] = data.map((task) => ({\n        id: String(task.id),\n        title: task.title,\n        date: new Date(task.createdAt).toLocaleDateString(),\n        status: task.status[0] + task.status.substring(1).toLowerCase(),\n        customer: {\n          initial: task.title[0]?.toUpperCase() ?? \"T\",\n          name: \"Test User\",\n          email: \"test@example.com\",\n        },\n      }));\n      setRows(mapped);\n      setError(null);\n    } catch (err) {\n      console.error(\"Ошибка при загрузке задач\", err);\n      setError(err as Error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadTasks();\n  }, [loadTasks]);\n\n  const handleDelete = async (id: string) => {\n    try {\n      await apiDeleteTask(Number(id));\n      await loadTasks();\n    } catch (err) {\n      console.error(\"Ошибка при удалении задачи\", err);\n      alert(\"Не удалось удалить задачу\");\n    }\n  };\n\n  return {\n    rows,\n    loading,\n    error,\n    refresh: loadTasks,\n    deleteTask: handleDelete,\n  };\n}"],"mappings":";AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,SAASC,QAAQ,EAAEC,UAAU,IAAIC,aAAa,QAAsB,aAAa;AAcjF,OAAO,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAY,EAAE,CAAC;EAC/C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAe,IAAI,CAAC;EAEtD,MAAMY,SAAS,GAAGd,WAAW,CAAC,YAAY;IACxCW,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMI,IAAoB,GAAG,MAAMZ,QAAQ,CAAC,CAAC;MAC7C,MAAMa,MAAiB,GAAGD,IAAI,CAACE,GAAG,CAAEC,IAAI;QAAA,IAAAC,qBAAA,EAAAC,YAAA;QAAA,OAAM;UAC5CC,EAAE,EAAEC,MAAM,CAACJ,IAAI,CAACG,EAAE,CAAC;UACnBE,KAAK,EAAEL,IAAI,CAACK,KAAK;UACjBC,IAAI,EAAE,IAAIC,IAAI,CAACP,IAAI,CAACQ,SAAS,CAAC,CAACC,kBAAkB,CAAC,CAAC;UACnDC,MAAM,EAAEV,IAAI,CAACU,MAAM,CAAC,CAAC,CAAC,GAAGV,IAAI,CAACU,MAAM,CAACC,SAAS,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;UAC/DC,QAAQ,EAAE;YACRC,OAAO,GAAAb,qBAAA,IAAAC,YAAA,GAAEF,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,cAAAH,YAAA,uBAAbA,YAAA,CAAea,WAAW,CAAC,CAAC,cAAAd,qBAAA,cAAAA,qBAAA,GAAI,GAAG;YAC5Ce,IAAI,EAAE,WAAW;YACjBC,KAAK,EAAE;UACT;QACF,CAAC;MAAA,CAAC,CAAC;MACH1B,OAAO,CAACO,MAAM,CAAC;MACfH,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOuB,GAAG,EAAE;MACZC,OAAO,CAACzB,KAAK,CAAC,2BAA2B,EAAEwB,GAAG,CAAC;MAC/CvB,QAAQ,CAACuB,GAAY,CAAC;IACxB,CAAC,SAAS;MACRzB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAENV,SAAS,CAAC,MAAM;IACda,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMwB,YAAY,GAAG,MAAOjB,EAAU,IAAK;IACzC,IAAI;MACF,MAAMhB,aAAa,CAACkC,MAAM,CAAClB,EAAE,CAAC,CAAC;MAC/B,MAAMP,SAAS,CAAC,CAAC;IACnB,CAAC,CAAC,OAAOsB,GAAG,EAAE;MACZC,OAAO,CAACzB,KAAK,CAAC,4BAA4B,EAAEwB,GAAG,CAAC;MAChDI,KAAK,CAAC,2BAA2B,CAAC;IACpC;EACF,CAAC;EAED,OAAO;IACLhC,IAAI;IACJE,OAAO;IACPE,KAAK;IACL6B,OAAO,EAAE3B,SAAS;IAClBV,UAAU,EAAEkC;EACd,CAAC;AACH;AAAC/B,EAAA,CAnDeD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}