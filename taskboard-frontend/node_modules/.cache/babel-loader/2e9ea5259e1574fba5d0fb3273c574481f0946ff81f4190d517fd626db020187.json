{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nimport { getTasks } from \"../api/task\";\nexport function useTasks() {\n  _s();\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sortBy, setSortBy] = useState(\"createdAt\");\n  const [sortOrder, setSortOrder] = useState(\"desc\");\n  const loadTasks = useCallback(async () => {\n    setLoading(true);\n    try {\n      const data = await getTasks({\n        sortBy,\n        sortOrder\n      });\n      const mapped = data.map(task => {\n        var _task$userId$;\n        return {\n          id: String(task.id),\n          date: new Date(task.createdAt).toLocaleDateString(),\n          status: task.status,\n          customer: {\n            initial: ((_task$userId$ = task.userId[0]) === null || _task$userId$ === void 0 ? void 0 : _task$userId$.toUpperCase()) || \"?\",\n            name: task.userId,\n            email: task.userId\n          }\n        };\n      });\n      setRows(mapped);\n      setError(null);\n    } catch (err) {\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [sortBy, sortOrder]);\n  useEffect(() => {\n    loadTasks();\n  }, [loadTasks]);\n  return {\n    rows,\n    loading,\n    error,\n    sortBy,\n    setSortBy,\n    sortOrder,\n    setSortOrder,\n    refresh: loadTasks\n  };\n}\n_s(useTasks, \"y4l4fvYCX6dbx27QSsFgCFex5T4=\");","map":{"version":3,"names":["useCallback","useEffect","useState","getTasks","useTasks","_s","rows","setRows","loading","setLoading","error","setError","sortBy","setSortBy","sortOrder","setSortOrder","loadTasks","data","mapped","map","task","_task$userId$","id","String","date","Date","createdAt","toLocaleDateString","status","customer","initial","userId","toUpperCase","name","email","err","refresh"],"sources":["/Users/exist/Desktop/work/taskboard-frontend/src/hooks/useTasks.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { getTasks, TaskResponse } from \"../api/task\";\n\nexport type RowType = {\n  id: string;\n  date: string;\n  status: string;\n  customer: {\n    initial: string;\n    name: string;\n    email: string;\n  };\n};\n\nexport function useTasks() {\n  const [rows, setRows] = useState<RowType[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  const [sortBy, setSortBy] = useState<string>(\"createdAt\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\n\n  const loadTasks = useCallback(async () => {\n    setLoading(true);\n    try {\n      const data: TaskResponse[] = await getTasks({ sortBy, sortOrder });\n\n      const mapped = data.map((task) => ({\n        id: String(task.id),\n        date: new Date(task.createdAt).toLocaleDateString(),\n        status: task.status,\n        customer: {\n          initial: task.userId[0]?.toUpperCase() || \"?\",\n          name: task.userId,\n          email: task.userId,\n        },\n      }));\n\n      setRows(mapped);\n      setError(null);\n    } catch (err) {\n      setError(err as Error);\n    } finally {\n      setLoading(false);\n    }\n  }, [sortBy, sortOrder]);\n\n  useEffect(() => {\n    loadTasks();\n  }, [loadTasks]);\n\n  return {\n    rows,\n    loading,\n    error,\n    sortBy,\n    setSortBy,\n    sortOrder,\n    setSortOrder,\n    refresh: loadTasks,\n  };\n}"],"mappings":";AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,SAASC,QAAQ,QAAsB,aAAa;AAapD,OAAO,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAY,EAAE,CAAC;EAC/C,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAe,IAAI,CAAC;EAEtD,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAS,WAAW,CAAC;EACzD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAiB,MAAM,CAAC;EAElE,MAAMc,SAAS,GAAGhB,WAAW,CAAC,YAAY;IACxCS,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMQ,IAAoB,GAAG,MAAMd,QAAQ,CAAC;QAAES,MAAM;QAAEE;MAAU,CAAC,CAAC;MAElE,MAAMI,MAAM,GAAGD,IAAI,CAACE,GAAG,CAAEC,IAAI;QAAA,IAAAC,aAAA;QAAA,OAAM;UACjCC,EAAE,EAAEC,MAAM,CAACH,IAAI,CAACE,EAAE,CAAC;UACnBE,IAAI,EAAE,IAAIC,IAAI,CAACL,IAAI,CAACM,SAAS,CAAC,CAACC,kBAAkB,CAAC,CAAC;UACnDC,MAAM,EAAER,IAAI,CAACQ,MAAM;UACnBC,QAAQ,EAAE;YACRC,OAAO,EAAE,EAAAT,aAAA,GAAAD,IAAI,CAACW,MAAM,CAAC,CAAC,CAAC,cAAAV,aAAA,uBAAdA,aAAA,CAAgBW,WAAW,CAAC,CAAC,KAAI,GAAG;YAC7CC,IAAI,EAAEb,IAAI,CAACW,MAAM;YACjBG,KAAK,EAAEd,IAAI,CAACW;UACd;QACF,CAAC;MAAA,CAAC,CAAC;MAEHxB,OAAO,CAACW,MAAM,CAAC;MACfP,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOwB,GAAG,EAAE;MACZxB,QAAQ,CAACwB,GAAY,CAAC;IACxB,CAAC,SAAS;MACR1B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACG,MAAM,EAAEE,SAAS,CAAC,CAAC;EAEvBb,SAAS,CAAC,MAAM;IACde,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,OAAO;IACLV,IAAI;IACJE,OAAO;IACPE,KAAK;IACLE,MAAM;IACNC,SAAS;IACTC,SAAS;IACTC,YAAY;IACZqB,OAAO,EAAEpB;EACX,CAAC;AACH;AAACX,EAAA,CA/CeD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}